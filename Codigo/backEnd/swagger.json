{
  "openapi": "3.0.0",
  "info": {
    "title": "AutoFarm - Plataforma web para automatizar e otimizar a atividade de pecuária",
    "description": "Plataforma web para automatizar e otimizar a gestão de operações de propriedades rurais que exercem a atividade de pecuária",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3500",
      "description": "Servidor Local"
    }
  ],
  "paths": {
    "/api/protected": {
      "get": {
        "summary": "Endpoint protegido",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Acesso permitido"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Token inválido"
          }
        }
      }
    },
    "/api/admin": {
      "get": {
        "summary": "Endpoint para administradores",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Acesso permitido para administradores"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Token inválido"
          }
        },
        "x-roles": [
          "admin"
        ]
      }
    },
    "/animal": {
      "get": {
        "summary": "Obter todos os animais",
        "description": "Retorna uma lista de todos os animais.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de animais retornada com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Animal"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Nenhum animal encontrado."
          }
        }
      },
      "post": {
        "summary": "Criar um novo animal",
        "description": "Cria um novo registro de animal.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Animal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Animal criado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Animal"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos para criação."
          }
        }
      }
    },
    "/animal/{id}": {
      "get": {
        "summary": "Obter animal por ID",
        "description": "Retorna os detalhes de um animal específico pelo ID.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do animal que será retornado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Animal encontrado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Animal"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum animal encontrado com o ID especificado."
          }
        }
      },
      "put": {
        "summary": "Atualizar animal",
        "description": "Atualiza as informações de um animal existente.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do animal a ser atualizado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Animal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Animal atualizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Animal"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum animal encontrado com o ID especificado."
          }
        }
      },
      "delete": {
        "summary": "Deletar animal",
        "description": "Remove um animal da base de dados.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do animal que será deletado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Animal deletado com sucesso."
          },
          "204": {
            "description": "Nenhum animal encontrado com o ID especificado."
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Login de usuário",
        "description": "Autentica um usuário e retorna um token de acesso.",
        "tags": [
          "Animal"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login bem-sucedido.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "Token de acesso gerado."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email e senha são obrigatórios."
          },
          "401": {
            "description": "Credenciais inválidas."
          }
        }
      }
    },
    "/comprador": {
      "get": {
        "summary": "Obter todos os compradores",
        "description": "Retorna uma lista de todos os compradores.",
        "tags": [
          "Comprador"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de compradores retornada com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comprador"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Nenhum comprador encontrado."
          }
        }
      },
      "post": {
        "summary": "Criar um novo comprador",
        "description": "Cria um novo registro de comprador.",
        "tags": [
          "Comprador"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comprador"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comprador criado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comprador"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos para criação."
          }
        }
      }
    },
    "/comprador/{id}": {
      "get": {
        "summary": "Obter comprador por ID",
        "description": "Retorna os detalhes de um comprador específico pelo ID.",
        "tags": [
          "Comprador"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do comprador que será retornado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comprador encontrado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comprador"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum comprador encontrado com o ID especificado."
          }
        }
      },
      "put": {
        "summary": "Atualizar comprador",
        "description": "Atualiza as informações de um comprador existente.",
        "tags": [
          "Comprador"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do comprador a ser atualizado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comprador"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comprador atualizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comprador"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum comprador encontrado com o ID especificado."
          }
        }
      },
      "delete": {
        "summary": "Deletar comprador",
        "description": "Remove um comprador da base de dados.",
        "tags": [
          "Comprador"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do comprador que será deletado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Comprador deletado com sucesso."
          },
          "204": {
            "description": "Nenhum comprador encontrado com o ID especificado."
          }
        }
      }
    },
    "/endereco": {
      "get": {
        "summary": "Obter todos os endereços",
        "description": "Retorna uma lista de todos os endereços.",
        "tags": [
          "Endereço"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de endereços retornada com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Endereco"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Nenhum endereço encontrado."
          }
        }
      },
      "post": {
        "summary": "Criar um novo endereço",
        "description": "Cria um novo registro de endereço.",
        "tags": [
          "Endereço"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endereco"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Endereço criado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endereco"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos para criação."
          }
        }
      }
    },
    "/endereco/{id}": {
      "get": {
        "summary": "Obter endereço por ID",
        "description": "Retorna os detalhes de um endereço específico pelo ID.",
        "tags": [
          "Endereço"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do endereço que será retornado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endereço encontrado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endereco"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum endereço encontrado com o ID especificado."
          }
        }
      },
      "put": {
        "summary": "Atualizar endereço",
        "description": "Atualiza as informações de um endereço existente.",
        "tags": [
          "Endereço"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do endereço a ser atualizado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endereco"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Endereço atualizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endereco"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum endereço encontrado com o ID especificado."
          }
        }
      },
      "delete": {
        "summary": "Deletar endereço",
        "description": "Remove um endereço da base de dados.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do endereço que será deletado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Endereço deletado com sucesso."
          },
          "204": {
            "description": "Nenhum endereço encontrado com o ID especificado."
          }
        }
      }
    },
    "/funcionario": {
      "get": {
        "summary": "Obter todos os funcionários",
        "description": "Retorna uma lista de todos os funcionários.",
        "tags": [
          "Funcionário"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de funcionários retornada com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Funcionario"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Nenhum funcionário encontrado."
          }
        }
      },
      "post": {
        "summary": "Criar um novo funcionário",
        "description": "Cria um novo registro de funcionário.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Funcionario"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Funcionário criado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Funcionario"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos para criação."
          }
        }
      }
    },
    "/funcionario/{id}": {
      "get": {
        "summary": "Obter funcionário por ID",
        "description": "Retorna os detalhes de um funcionário específico pelo ID.",
        "tags": [
          "Funcionário"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do funcionário que será retornado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Funcionário encontrado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Funcionario"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum funcionário encontrado com o ID especificado."
          }
        }
      },
      "put": {
        "summary": "Atualizar funcionário",
        "description": "Atualiza as informações de um funcionário existente.",
        "tags": [
          "Funcionário"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do funcionário a ser atualizado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Funcionario"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funcionário atualizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Funcionario"
                }
              }
            }
          },
          "204": {
            "description": "Nenhum funcionário encontrado com o ID especificado."
          }
        }
      },
      "delete": {
        "summary": "Deletar funcionário",
        "description": "Remove um funcionário da base de dados.",
        "tags": [
          "Funcionário"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID do funcionário que será deletado.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Funcionário deletado com sucesso."
          },
          "204": {
            "description": "Nenhum funcionário encontrado com o ID especificado."
          }
        }
      }
    },
    "/historico": {
      "post": {
        "summary": "Criar um novo histórico",
        "description": "Cria um novo registro de histórico de tratamento para um animal.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dados para criar um novo histórico.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Historico"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Histórico criado com sucesso."
          },
          "500": {
            "description": "Erro ao criar histórico."
          }
        }
      },
      "get": {
        "summary": "Listar todos os históricos",
        "description": "Recupera uma lista de todos os históricos de tratamentos.",
        "responses": {
          "200": {
            "description": "Lista de históricos.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Historico"
              }
            }
          },
          "404": {
            "description": "Nenhum histórico encontrado."
          },
          "500": {
            "description": "Erro ao buscar históricos."
          }
        }
      }
    },
    "/historico/{id}": {
      "get": {
        "summary": "Obter histórico por ID",
        "description": "Recupera um histórico específico usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do histórico."
          }
        ],
        "responses": {
          "200": {
            "description": "Detalhes do histórico.",
            "schema": {
              "$ref": "#/definitions/Historico"
            }
          },
          "404": {
            "description": "Histórico não encontrado."
          },
          "500": {
            "description": "Erro ao buscar histórico."
          }
        }
      },
      "put": {
        "summary": "Atualizar histórico por ID",
        "description": "Atualiza os dados de um histórico existente usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do histórico."
          },
          {
            "in": "body",
            "name": "body",
            "description": "Dados para atualizar o histórico.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Historico"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Histórico atualizado com sucesso."
          },
          "404": {
            "description": "Histórico não encontrado."
          },
          "500": {
            "description": "Erro ao atualizar histórico."
          }
        }
      },
      "delete": {
        "summary": "Deletar histórico por ID",
        "description": "Remove um histórico específico usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do histórico."
          }
        ],
        "responses": {
          "200": {
            "description": "Histórico deletado com sucesso."
          },
          "404": {
            "description": "Histórico não encontrado."
          },
          "500": {
            "description": "Erro ao deletar histórico."
          }
        }
      }
    },
    "/leilao": {
      "post": {
        "summary": "Criar um novo leilão",
        "description": "Cria um novo registro de leilão.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dados para criar um novo leilão.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Leilao"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Leilão criado com sucesso."
          },
          "500": {
            "description": "Erro ao criar leilão."
          }
        }
      },
      "get": {
        "summary": "Listar todos os leilões",
        "description": "Recupera uma lista de todos os leilões.",
        "responses": {
          "200": {
            "description": "Lista de leilões.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Leilao"
              }
            }
          },
          "404": {
            "description": "Nenhum leilão encontrado."
          },
          "500": {
            "description": "Erro ao buscar leilões."
          }
        }
      }
    },
    "/leilao/{id}": {
      "get": {
        "summary": "Obter leilão por ID",
        "description": "Recupera um leilão específico usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do leilão."
          }
        ],
        "responses": {
          "200": {
            "description": "Detalhes do leilão.",
            "schema": {
              "$ref": "#/definitions/Leilao"
            }
          },
          "404": {
            "description": "Leilão não encontrado."
          },
          "500": {
            "description": "Erro ao buscar leilão."
          }
        }
      },
      "put": {
        "summary": "Atualizar leilão por ID",
        "description": "Atualiza os dados de um leilão existente usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do leilão."
          },
          {
            "in": "body",
            "name": "body",
            "description": "Dados para atualizar o leilão.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Leilao"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leilão atualizado com sucesso."
          },
          "404": {
            "description": "Leilão não encontrado."
          },
          "500": {
            "description": "Erro ao atualizar leilão."
          }
        }
      },
      "delete": {
        "summary": "Deletar leilão por ID",
        "description": "Remove um leilão específico usando o ID fornecido.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do leilão."
          }
        ],
        "responses": {
          "200": {
            "description": "Leilão deletado com sucesso."
          },
          "404": {
            "description": "Leilão não encontrado."
          },
          "500": {
            "description": "Erro ao deletar leilão."
          }
        }
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout do usuário",
        "description": "Realiza o logout de um usuário removendo o token de atualização armazenado.",
        "responses": {
          "204": {
            "description": "Logout realizado com sucesso, sem conteúdo retornado."
          },
          "403": {
            "description": "Token de atualização não encontrado ou inválido."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "schemas": {
      "Animal": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do animal."
          },
          "sexo": {
            "type": "string",
            "enum": [
              "macho",
              "femea"
            ],
            "description": "Sexo do animal."
          },
          "nascimento": {
            "type": "string",
            "format": "date",
            "description": "Data de nascimento do animal."
          },
          "raca": {
            "type": "string",
            "description": "Raça do animal."
          }
        },
        "required": [
          "nome",
          "sexo",
          "nascimento",
          "raca"
        ]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email do usuário."
          },
          "password": {
            "type": "string",
            "description": "Senha do usuário."
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Comprador": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do comprador."
          },
          "email": {
            "type": "string",
            "description": "Email do comprador."
          },
          "cpfCnpj": {
            "type": "string",
            "description": "CPF ou CNPJ do comprador."
          },
          "registroLeilao": {
            "type": "integer",
            "description": "Registro do leilão do comprador."
          },
          "pagamento": {
            "type": "string",
            "enum": [
              "debito",
              "credito",
              "dinheiro",
              "pix",
              "boleto"
            ],
            "description": "Método de pagamento do comprador."
          }
        },
        "required": [
          "nome",
          "email",
          "cpfCnpj",
          "registroLeilao",
          "pagamento"
        ]
      },
      "Endereco": {
        "type": "object",
        "properties": {
          "cep": {
            "type": "string",
            "description": "Código postal."
          },
          "rua": {
            "type": "string",
            "description": "Nome da rua."
          },
          "bairro": {
            "type": "string",
            "description": "Nome do bairro."
          },
          "cidade": {
            "type": "string",
            "description": "Nome da cidade."
          },
          "estado": {
            "type": "string",
            "description": "Nome do estado."
          },
          "pais": {
            "type": "string",
            "description": "Nome do país."
          }
        },
        "required": [
          "rua",
          "bairro",
          "cidade",
          "estado",
          "pais"
        ]
      },
      "Funcionario": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do funcionário."
          },
          "email": {
            "type": "string",
            "description": "Email do funcionário."
          },
          "horas": {
            "type": "number",
            "description": "Número de horas trabalhadas."
          },
          "salario": {
            "type": "number",
            "description": "Salário do funcionário."
          },
          "senha": {
            "type": "string",
            "description": "Senha do funcionário."
          }
        },
        "required": [
          "nome",
          "email",
          "horas",
          "salario",
          "senha"
        ]
      },
      "Historico": {
        "type": "object",
        "required": [
          "data",
          "peso",
          "tratamento",
          "local",
          "tamanho",
          "animalId"
        ],
        "properties": {
          "data": {
            "type": "string",
            "format": "date",
            "example": "2024-09-01"
          },
          "peso": {
            "type": "number",
            "example": 15.5
          },
          "tratamento": {
            "type": "string",
            "example": "Vermifugação"
          },
          "local": {
            "type": "string",
            "example": "Clínica Veterinária"
          },
          "tamanho": {
            "type": "number",
            "example": 60
          },
          "animalId": {
            "type": "string",
            "example": "651b56f84fa9a0b8a6657a8d"
          }
        }
      },
      "Leilao": {
        "type": "object",
        "required": [
          "nome",
          "leiloeiro",
          "valorArrematado"
        ],
        "properties": {
          "nome": {
            "type": "string",
            "example": "Leilão de Arte"
          },
          "leiloeiro": {
            "type": "string",
            "example": "José Silva"
          },
          "valorArrematado": {
            "type": "number",
            "example": 150000.0
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "example": "strongpassword123"
          },
          "refreshToken": {
            "type": "string",
            "description": "Token de atualização para revalidar sessões."
          }
        }
      }
    }
  }
}